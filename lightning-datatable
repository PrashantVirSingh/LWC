==============Apex class:=================================

public with sharing class Fetch_Account {
  @AuraEnabled(cacheable=true)
    public static list<Account> fetchAcc(){
        list<Account> lstAcc = new list<Account>();
        lstAcc=[select Id, Name, Active__c,NumberOfEmployees,Website,Phone from Account Limit 10];
        return lstAcc;

    }
}

===============LWC====================
Type 1. Basic Datatable: with checkbox & selectAll (how to work with checkbox will discuss later)
==============================================================================================================
<template>
    <div style="height: 300px;">
        <lightning-datatable
                key-field="id"
                data={data}
                columns={columns}>
        </lightning-datatable>
    </div>
</template>

import { LightningElement,wire } from 'lwc';
import apexM from '@salesforce/apex/Fetch_Account.fetchAcc';

const columns = [
    { label: 'Id', fieldName: 'Id' },
    { label: 'Name', fieldName: 'Name'},
    { label: 'Status', fieldName: 'Active__c'},
    { label: 'Number of Employees', fieldName: 'NumberOfEmployees'},
    { label: 'Website', fieldName: 'Website',type: 'url'},
    { label: 'Phone', fieldName: 'phone', type: 'phone' },
    
];

export default class LearnLwc extends LightningElement {
    data = [];
    columns = columns;
    error;
@wire(apexM)
    wiredAccount({ data, error }) {
    if (data) {
      this.data = data;
      this.error = undefined;
    } else if (error) {
      this.error = error;
      this.data = undefined;
    }
  }
}

==============================================================================================================
Type 2. Datatable with row number: Specify show-row-number-column to show row numbers in the data table
==============================================================================================================
<template>
    <div style="height: 300px;">
        <lightning-datatable
                key-field="id"
                data={data}
                show-row-number-column
                row-number-offset={rowOffset}
                hide-checkbox-column
                columns={columns}>
        </lightning-datatable>
    </div>
    <div class="slds-m-around--medium">
        <lightning-button
                label="Increase row offset"
                onclick={increaseRowOffset}>
        </lightning-button>
    </div>
</template>

import { LightningElement,wire } from 'lwc';
import apexM from '@salesforce/apex/Fetch_Account.fetchAcc';

const columns = [
    { label: 'Id', fieldName: 'Id' },
    { label: 'Name', fieldName: 'Name'},
    { label: 'Status', fieldName: 'Active__c'},
    { label: 'Number of Employees', fieldName: 'NumberOfEmployees'},
    { label: 'Website', fieldName: 'Website',type: 'url'},
    { label: 'Phone', fieldName: 'phone', type: 'phone' },
    
];

export default class LearnLwc extends LightningElement {
    data = [];
    columns = columns;
    rowOffset = 0;
    error;
@wire(apexM)
    wiredAccount({ data, error }) {
    if (data) {
      this.data = data;
      this.error = undefined;
    } else if (error) {
      this.error = error;
      this.data = undefined;
    }
  }

  increaseRowOffset() {
        this.rowOffset += 100;
    }
}
==============================================================================================================
Type 3. A data table with a column that can be sorted in ascending or descending order.
==============================================================================================================
<template>
    <div style="height: 300px;">
        <lightning-datatable
                key-field="id"
                data={data}
                columns={columns}
                hide-checkbox-column
                default-sort-direction={defaultSortDirection}
                sorted-direction={sortDirection}
                sorted-by={sortedBy}
                onsort={onHandleSort}>
        </lightning-datatable>
    </div>
</template>




import { LightningElement,wire } from 'lwc';
import apexM from '@salesforce/apex/Fetch_Account.fetchAcc';

const columns = [
    { label: 'Id', fieldName: 'Id' },
    { label: 'Name', fieldName: 'Name'},
    { label: 'Status', fieldName: 'Active__c'},

    //using fieldName: 'NumberOfEmployees' for sorting
    { label: 'Number of Employees', fieldName: 'NumberOfEmployees', 
        type: 'number',sortable: true,cellAttributes: { alignment: 'left' }},
    //using fieldName: 'NumberOfEmployees' for sorting

    { label: 'Website', fieldName: 'Website',type: 'url'},
    { label: 'Phone', fieldName: 'phone', type: 'phone' },
    
];

export default class LearnLwc extends LightningElement {
    data = [];
    columns = columns;
    error;
    defaultSortDirection = 'asc';
    sortDirection = 'asc';
    sortedBy;
@wire(apexM)
    wiredAccount({ data, error }) {
    if (data) {
      this.data = data;
      this.error = undefined;
    } else if (error) {
      this.error = error;
      this.data = undefined;
    }
  }
  // Used to sort the 'Age' column
  sortBy(field, reverse, primer) {
    const key = primer
        ? function (x) {
              return primer(x[field]);
          }
        : function (x) {
              return x[field];
          };

    return function (a, b) {
        a = key(a);
        b = key(b);
        return reverse * ((a > b) - (b > a));
    };
}

onHandleSort(event) {
    const { fieldName: sortedBy, sortDirection } = event.detail;
    const cloneData = [...this.data];

    cloneData.sort(this.sortBy(sortedBy, sortDirection === 'asc' ? 1 : -1));
    this.data = cloneData;
    this.sortDirection = sortDirection;
    this.sortedBy = sortedBy;
}
}
==============================
Official salesforce documents: https://developer.salesforce.com/docs/component-library/bundle/lightning-datatable/example
============================== https://www.lightningdesignsystem.com/2e1ef8501/p/86f13a-data-table
                               https://sds-site-docs-1fea39e7763a.herokuapp.com/index.html?path=/story/components-data-table-lbc-examples--with-infinite-scrolling
