Generally, we call functions 
=============either:==================
function fn() {

	console.log('inside fn');

}

function fn2() {
	console.log('inside fn2 @@');
}

function fn3() {

	console.log('inside fn3');

}
fn();
fn2();
fn3();

============or==============

function fn() {

	console.log('inside fn');
	fn2();
}

function fn2() {
	console.log('inside fn2 @@');
}

function fn3() {

	console.log('inside fn3');

}
fn();
//fn2();
fn3();
which means, we are hardcoding calling of function
===========================
E.g. 01: Callback function with comparison
Normal way                                                                                     Callback:
function fn(){                                                                        function fn(callback){                     

    console.log('inside fn');                                                               console.log('inside fn');
   fn2();                                                                                  //fn2();
}                                                                                      callback();
                                                                                       }

function fn2(){                                                                      function fn2(){
    console.log('inside fn2 @@');                                                         console.log('inside fn2 @@');
}                                                                                      }

function fn3(){                                                                    function fn3(){

console.log('inside fn3');                                                                 console.log('inside fn3');
    
}                                                                                     }
fn();
//fn2();
fn3();                                                                                fn(fn3);



E.g. 02:    with single callback parameter
 Normal way:                                                                                     callback:     
 
 function learn() {                                                           function learn(callback1, callback2) {
 	const name = "LWC";                                                          const name = "LWC";	                                      
 	courseName(name);                                                            callback1(name);         // calling the callback function
 	                                                                          
 }                                                                            }
 
 function courseName(name) {                                                  function courseName(name) {
 	console.log(`I am learning, ${name}!`);                                     console.log(`I am learning, ${name}!`);
 }                                                                            }
 
 
 learn();          //calling parent function                                  learn(courseName);
 											
 											
 												                                Output:
     										                          I am learning, LWC!
 
 
 
 E.g. 03: with mulitple callback parameter
 
 Normal way:                                                                                     callback:     
 
 function learn() {                                                           function learn(callback1, callback2) {
 	const name = "LWC";                                                          const name = "LWC";
 	const trainer = 'Prashant Veer Singh';                                       const trainer ='Prashant Veer Singh';
 	courseName(name);                                                            callback1(name);         // calling the callback function
 	coach(trainer);                                                              callback2(trainer);      // calling the callback function
 }                                                                            }
 
 function courseName(name) {                                                  function courseName(name) {
 	console.log(`I am learning, ${name}!`);                                     console.log(`I am learning, ${name}!`);
 }                                                                            }
 
 function coach(trainer) {                                                    function coach(trainer){
 
 	console.log(`I am learning from, ${trainer}!`);                              console.log(`I am learning from, ${trainer}!`);
 
 }                                                                            }
 
 learn();          //calling parent function                                  learn(courseName,coach);
 											
 											
 												                            Output:
 										                          I am learning, LWC!
 										                          I am learning from, Prashant Veer Singh!


E.g. 04:
function input(input1, input2, input3){
    console.log('inside input function');
    console.log('input1 is: ',input1);
    console.log(`input 2 is: ${input2}`);
   input3(input1, input2);
}

function sum(s1, s2){

    s3 = s1+s2;
  console.log('sum is:  ',s3);
}

function diff(d1, d2){
    d3=d1-d2;
    console.log('difference is: ',d3);
}
input(6,4, sum);



E.g. 05:
function input(input1, input2, input3,input4){
    console.log('inside input function');
    console.log('input1 is: ',input1);
    console.log(`input 2 is: ${input2}`);
  
    input4(input1, input2);
     input3(input1, input2);
}

function sum(s1, s2){

    s3 = s1+s2;
  console.log('sum is:  ',s3);
}

function diff(d1, d2){
    d3=d1-d2;
    console.log('difference is: ',d3);
}
input(6,4, sum, diff);

Output: 
inside input function
input1 is:  6
input 2 is: 4
difference is:  2
sum is:   10


 E.g. 06: Asynchronous Call
 function fetchData(callback) {
   setTimeout(() => {
     const data = { id: 1, name: "Veer - the developer" };
     callback(data); // callback with fetched data
   }, 2000); // simulate 1 second delay
 }
 
 function displayData(data) {
   console.log("Data received:", data);
 }
 
 fetchData(displayData);
 
 Output: Data received: { id: 1, name: 'Veer - the developer' }

E.g. 07: Use in LWC:
<template>
   
    <lightning-button variant="brand" label="Brand" title="Primary action" onclick={handleClick} 
    class="slds-m-left_x-small"></lightning-button>

   <div>
     {showOut}
   </div>
</template>


===========================

import { LightningElement } from 'lwc';

export default class CallbackDemo extends LightningElement {
showOut;

handleClick() {
    setTimeout(this.myfun.bind(this), 3000);
}


    myfun() {
        
        this.showOut = 'Hello! Prashant Veer Singh';
    }

}

================================
<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__AppPage</target>
        <target>lightning__HomePage</target>
		 <target>lightning__RecordPage</target>
    </targets>
</LightningComponentBundle>
 ============alternate approach=====
import { LightningElement } from 'lwc';

export default class CallbackDemo extends LightningElement {
showOut;

handleClick() {
    
    setTimeout(() => {
        this.myfun();
    }, 1000);
}

    myfun() {
        
        this.showOut = 'Hello! Prashant Veer Singh';
    }

}


 link for online js compiler: https://nextleap.app/online-compiler/javascript-programming
                              https://codepen.io/pen/
                              https://jsfiddle.net/
